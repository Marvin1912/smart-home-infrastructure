version: "3.8"
services:
  db:
    image: "postgres:15.3"
    container_name: "postgres"
    hostname: "postgres"
    environment:
      POSTGRES_USER: "marvin"
      POSTGRES_PASSWORD: "password"
      POSTGRES_DB: "wildfly_domain"
    volumes:
      - "postgres_data:/var/lib/postgresql/data"
    ports:
      - "5432:5432"
    restart: unless-stopped

  domain-controller:
    image: localhost:5000/domain-controller:latest
    container_name: "domain-controller"
    hostname: "domain-controller"
    environment:
      POSTGRES_USER: "marvin"
      POSTGRES_PASSWORD: "password"
      POSTGRES_DB: "wildfly_domain"
      POSTGRES_HOST: postgres
    ports:
      - "8081:8080"
      - "8443:8443"
      - "9991:9990"
    restart: unless-stopped
    depends_on:
      - db

  host-1:
    image: localhost:5000/host-1:latest
    container_name: "host-1"
    hostname: "host-1"
    environment:
      POSTGRES_USER: "marvin"
      POSTGRES_PASSWORD: "password"
      POSTGRES_DB: "wildfly_domain"
      POSTGRES_HOST: postgres
    ports:
      - "8444:8444"
    restart: unless-stopped
    depends_on:
      - db
      - domain-controller

  host-2:
    image: localhost:5000/host-2:latest
    container_name: "host-2"
    hostname: "host-2"
    environment:
      POSTGRES_USER: "marvin"
      POSTGRES_PASSWORD: "password"
      POSTGRES_DB: "wildfly_domain"
      POSTGRES_HOST: postgres
    ports:
      - "8445:8445"
    restart: unless-stopped
    depends_on:
      - db
      - domain-controller

  host-3:
    image: localhost:5000/host-3:latest
    container_name: "host-3"
    hostname: "host-3"
    environment:
      POSTGRES_USER: "marvin"
      POSTGRES_PASSWORD: "password"
      POSTGRES_DB: "wildfly_domain"
      POSTGRES_HOST: postgres
    ports:
      - "8446:8446"
    restart: unless-stopped
    depends_on:
      - db
      - domain-controller

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka-broker:
    image: confluentinc/cp-server:7.4.0
    hostname: kafka-broker
    container_name: kafka-broker
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka-broker:29092
      CONFLUENT_METRICS_ENABLE: 'false'
    command: sh -c "sleep 30s && /etc/confluent/docker/run"

  kafka-init:
    image: confluentinc/cp-server:7.4.0
    container_name: kafka-init
    depends_on:
      - kafka-broker
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka-broker:29092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka-broker:29092 --create --if-not-exists --topic com.marvin.costs.monthly --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka-broker:29092 --list
      "

  consul-server:
    image: hashicorp/consul:1.16
    container_name: consul-server
    volumes:
      - ./consul/server.json:/consul/config/server.json:ro
      - ./consul/certs/:/consul/config/certs/:ro
    ports:
      - "8500:8500"
      - "8600:8600/tcp"
      - "8600:8600/udp"
    command: "agent -bootstrap-expect=1"
    restart: "unless-stopped"

  consul-client:
    image: hashicorp/consul:1.16
    container_name: consul-client
    volumes:
      - ./consul/client.json:/consul/config/client.json:ro
      - ./consul/certs/:/consul/config/certs/:ro
    command: "agent"
    restart: unless-stopped
  
  registry:
    image: registry:2
    container_name: registry
    ports:
      - "5000:5000"
    restart: unless-stopped

volumes:
  postgres_data:
